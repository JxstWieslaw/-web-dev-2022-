{"ast":null,"code":"import * as THREE from 'three';\nimport { nanoid } from 'nanoid';\n\nfunction shaderMaterial(uniforms, vertexShader, fragmentShader, onInit) {\n  const material = class material extends THREE.ShaderMaterial {\n    constructor() {\n      const entries = Object.entries(uniforms); // Create unforms and shaders\n\n      super({\n        uniforms: entries.reduce((acc, _ref) => {\n          let [name, value] = _ref;\n          const uniform = THREE.UniformsUtils.clone({\n            [name]: {\n              value\n            }\n          });\n          return { ...acc,\n            ...uniform\n          };\n        }, {}),\n        vertexShader,\n        fragmentShader\n      }); // Create getter/setters\n\n      this.key = '';\n      entries.forEach(_ref2 => {\n        let [name] = _ref2;\n        return Object.defineProperty(this, name, {\n          get: () => this.uniforms[name].value,\n          set: v => this.uniforms[name].value = v\n        });\n      });\n      if (onInit) onInit(this);\n    }\n\n  };\n  material.key = nanoid();\n  return material;\n}\n\nexport { shaderMaterial };","map":{"version":3,"sources":["C:/Users/pc/Documents/Repositories/web-dev-2022/26_try-on-gallery/features/21_r3f-integration-auth-app - Copy/client/node_modules/@react-three/drei/core/shaderMaterial.js"],"names":["THREE","nanoid","shaderMaterial","uniforms","vertexShader","fragmentShader","onInit","material","ShaderMaterial","constructor","entries","Object","reduce","acc","name","value","uniform","UniformsUtils","clone","key","forEach","defineProperty","get","set","v"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,QAAuB,QAAvB;;AAEA,SAASC,cAAT,CAAwBC,QAAxB,EAAkCC,YAAlC,EAAgDC,cAAhD,EAAgEC,MAAhE,EAAwE;AACtE,QAAMC,QAAQ,GAAG,MAAMA,QAAN,SAAuBP,KAAK,CAACQ,cAA7B,CAA4C;AAC3DC,IAAAA,WAAW,GAAG;AACZ,YAAMC,OAAO,GAAGC,MAAM,CAACD,OAAP,CAAeP,QAAf,CAAhB,CADY,CAC8B;;AAE1C,YAAM;AACJA,QAAAA,QAAQ,EAAEO,OAAO,CAACE,MAAR,CAAe,CAACC,GAAD,WAAwB;AAAA,cAAlB,CAACC,IAAD,EAAOC,KAAP,CAAkB;AAC/C,gBAAMC,OAAO,GAAGhB,KAAK,CAACiB,aAAN,CAAoBC,KAApB,CAA0B;AACxC,aAACJ,IAAD,GAAQ;AACNC,cAAAA;AADM;AADgC,WAA1B,CAAhB;AAKA,iBAAO,EAAE,GAAGF,GAAL;AACL,eAAGG;AADE,WAAP;AAGD,SATS,EASP,EATO,CADN;AAWJZ,QAAAA,YAXI;AAYJC,QAAAA;AAZI,OAAN,EAHY,CAgBR;;AAEJ,WAAKc,GAAL,GAAW,EAAX;AACAT,MAAAA,OAAO,CAACU,OAAR,CAAgB;AAAA,YAAC,CAACN,IAAD,CAAD;AAAA,eAAYH,MAAM,CAACU,cAAP,CAAsB,IAAtB,EAA4BP,IAA5B,EAAkC;AAC5DQ,UAAAA,GAAG,EAAE,MAAM,KAAKnB,QAAL,CAAcW,IAAd,EAAoBC,KAD6B;AAE5DQ,UAAAA,GAAG,EAAEC,CAAC,IAAI,KAAKrB,QAAL,CAAcW,IAAd,EAAoBC,KAApB,GAA4BS;AAFsB,SAAlC,CAAZ;AAAA,OAAhB;AAIA,UAAIlB,MAAJ,EAAYA,MAAM,CAAC,IAAD,CAAN;AACb;;AAzB0D,GAA7D;AA4BAC,EAAAA,QAAQ,CAACY,GAAT,GAAelB,MAAM,EAArB;AACA,SAAOM,QAAP;AACD;;AAED,SAASL,cAAT","sourcesContent":["import * as THREE from 'three';\nimport { nanoid } from 'nanoid';\n\nfunction shaderMaterial(uniforms, vertexShader, fragmentShader, onInit) {\n  const material = class material extends THREE.ShaderMaterial {\n    constructor() {\n      const entries = Object.entries(uniforms); // Create unforms and shaders\n\n      super({\n        uniforms: entries.reduce((acc, [name, value]) => {\n          const uniform = THREE.UniformsUtils.clone({\n            [name]: {\n              value\n            }\n          });\n          return { ...acc,\n            ...uniform\n          };\n        }, {}),\n        vertexShader,\n        fragmentShader\n      }); // Create getter/setters\n\n      this.key = '';\n      entries.forEach(([name]) => Object.defineProperty(this, name, {\n        get: () => this.uniforms[name].value,\n        set: v => this.uniforms[name].value = v\n      }));\n      if (onInit) onInit(this);\n    }\n\n  };\n  material.key = nanoid();\n  return material;\n}\n\nexport { shaderMaterial };\n"]},"metadata":{},"sourceType":"module"}