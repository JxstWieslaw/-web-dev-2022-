{"ast":null,"code":"import * as React from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport { Color, Vector3, Spherical, AdditiveBlending, ShaderMaterial } from 'three';\n\nclass StarfieldMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      uniforms: {\n        time: {\n          value: 0.0\n        },\n        fade: {\n          value: 1.0\n        }\n      },\n      vertexShader:\n      /* glsl */\n      `\n      uniform float time;\n      attribute float size;\n      varying vec3 vColor;\n      void main() {\n        vColor = color;\n        vec4 mvPosition = modelViewMatrix * vec4(position, 0.5);\n        gl_PointSize = size * (30.0 / -mvPosition.z) * (3.0 + sin(mvPosition.x + 2.0 * time + 100.0));\n        gl_Position = projectionMatrix * mvPosition;\n      }`,\n      fragmentShader:\n      /* glsl */\n      `\n      uniform sampler2D pointTexture;\n      uniform float fade;\n      varying vec3 vColor;\n      void main() {\n        float opacity = 1.0;\n        if (fade == 1.0) {\n          float d = distance(gl_PointCoord, vec2(0.5, 0.5));\n          opacity = 1.0 / (1.0 + exp(16.0 * (d - 0.25)));\n        }\n        gl_FragColor = vec4(vColor, opacity);\n\n        #include <tonemapping_fragment>\n\t      #include <encodings_fragment>\n      }`\n    });\n  }\n\n}\n\nconst genStar = r => {\n  return new Vector3().setFromSpherical(new Spherical(r, Math.acos(1 - Math.random() * 2), Math.random() * 2 * Math.PI));\n};\n\nconst Stars = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    radius = 100,\n    depth = 50,\n    count = 5000,\n    saturation = 0,\n    factor = 4,\n    fade = false,\n    speed = 1\n  } = _ref;\n  const material = React.useRef();\n  const [position, color, size] = React.useMemo(() => {\n    const positions = [];\n    const colors = [];\n    const sizes = Array.from({\n      length: count\n    }, () => (0.5 + 0.5 * Math.random()) * factor);\n    const color = new Color();\n    let r = radius + depth;\n    const increment = depth / count;\n\n    for (let i = 0; i < count; i++) {\n      r -= increment * Math.random();\n      positions.push(...genStar(r).toArray());\n      color.setHSL(i / count, saturation, 0.9);\n      colors.push(color.r, color.g, color.b);\n    }\n\n    return [new Float32Array(positions), new Float32Array(colors), new Float32Array(sizes)];\n  }, [count, depth, factor, radius, saturation]);\n  useFrame(state => material.current && (material.current.uniforms.time.value = state.clock.getElapsedTime() * speed));\n  const [starfieldMaterial] = React.useState(() => new StarfieldMaterial());\n  return /*#__PURE__*/React.createElement(\"points\", {\n    ref: ref\n  }, /*#__PURE__*/React.createElement(\"bufferGeometry\", null, /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attach: \"attributes-position\",\n    args: [position, 3]\n  }), /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attach: \"attributes-color\",\n    args: [color, 3]\n  }), /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attach: \"attributes-size\",\n    args: [size, 1]\n  })), /*#__PURE__*/React.createElement(\"primitive\", {\n    ref: material,\n    object: starfieldMaterial,\n    attach: \"material\",\n    blending: AdditiveBlending,\n    \"uniforms-fade-value\": fade,\n    transparent: true,\n    vertexColors: true\n  }));\n});\nexport { Stars };","map":{"version":3,"sources":["C:/Users/pc/Documents/Repositories/web-dev-2022/26_try-on-gallery/features/26_r3f-web-avatar/client/node_modules/@react-three/drei/core/Stars.js"],"names":["React","useFrame","Color","Vector3","Spherical","AdditiveBlending","ShaderMaterial","StarfieldMaterial","constructor","uniforms","time","value","fade","vertexShader","fragmentShader","genStar","r","setFromSpherical","Math","acos","random","PI","Stars","forwardRef","ref","radius","depth","count","saturation","factor","speed","material","useRef","position","color","size","useMemo","positions","colors","sizes","Array","from","length","increment","i","push","toArray","setHSL","g","b","Float32Array","state","current","clock","getElapsedTime","starfieldMaterial","useState","createElement","attach","args","object","blending","transparent","vertexColors"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport { Color, Vector3, Spherical, AdditiveBlending, ShaderMaterial } from 'three';\n\nclass StarfieldMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      uniforms: {\n        time: {\n          value: 0.0\n        },\n        fade: {\n          value: 1.0\n        }\n      },\n      vertexShader:\n      /* glsl */\n      `\n      uniform float time;\n      attribute float size;\n      varying vec3 vColor;\n      void main() {\n        vColor = color;\n        vec4 mvPosition = modelViewMatrix * vec4(position, 0.5);\n        gl_PointSize = size * (30.0 / -mvPosition.z) * (3.0 + sin(mvPosition.x + 2.0 * time + 100.0));\n        gl_Position = projectionMatrix * mvPosition;\n      }`,\n      fragmentShader:\n      /* glsl */\n      `\n      uniform sampler2D pointTexture;\n      uniform float fade;\n      varying vec3 vColor;\n      void main() {\n        float opacity = 1.0;\n        if (fade == 1.0) {\n          float d = distance(gl_PointCoord, vec2(0.5, 0.5));\n          opacity = 1.0 / (1.0 + exp(16.0 * (d - 0.25)));\n        }\n        gl_FragColor = vec4(vColor, opacity);\n\n        #include <tonemapping_fragment>\n\t      #include <encodings_fragment>\n      }`\n    });\n  }\n\n}\n\nconst genStar = r => {\n  return new Vector3().setFromSpherical(new Spherical(r, Math.acos(1 - Math.random() * 2), Math.random() * 2 * Math.PI));\n};\n\nconst Stars = /*#__PURE__*/React.forwardRef(({\n  radius = 100,\n  depth = 50,\n  count = 5000,\n  saturation = 0,\n  factor = 4,\n  fade = false,\n  speed = 1\n}, ref) => {\n  const material = React.useRef();\n  const [position, color, size] = React.useMemo(() => {\n    const positions = [];\n    const colors = [];\n    const sizes = Array.from({\n      length: count\n    }, () => (0.5 + 0.5 * Math.random()) * factor);\n    const color = new Color();\n    let r = radius + depth;\n    const increment = depth / count;\n\n    for (let i = 0; i < count; i++) {\n      r -= increment * Math.random();\n      positions.push(...genStar(r).toArray());\n      color.setHSL(i / count, saturation, 0.9);\n      colors.push(color.r, color.g, color.b);\n    }\n\n    return [new Float32Array(positions), new Float32Array(colors), new Float32Array(sizes)];\n  }, [count, depth, factor, radius, saturation]);\n  useFrame(state => material.current && (material.current.uniforms.time.value = state.clock.getElapsedTime() * speed));\n  const [starfieldMaterial] = React.useState(() => new StarfieldMaterial());\n  return /*#__PURE__*/React.createElement(\"points\", {\n    ref: ref\n  }, /*#__PURE__*/React.createElement(\"bufferGeometry\", null, /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attach: \"attributes-position\",\n    args: [position, 3]\n  }), /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attach: \"attributes-color\",\n    args: [color, 3]\n  }), /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attach: \"attributes-size\",\n    args: [size, 1]\n  })), /*#__PURE__*/React.createElement(\"primitive\", {\n    ref: material,\n    object: starfieldMaterial,\n    attach: \"material\",\n    blending: AdditiveBlending,\n    \"uniforms-fade-value\": fade,\n    transparent: true,\n    vertexColors: true\n  }));\n});\n\nexport { Stars };\n"]},"metadata":{},"sourceType":"module"}